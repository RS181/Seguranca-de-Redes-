
user www-data;
worker_processes auto;
worker_rlimit_nofile 8192;
pid /run/nginx.pid;

events {
    worker_connections 4096;
}

http {
    # Define um limite global de 10 requisições por segundo (2r/s) por IP usando a zona de memória api_limit
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=2r/s;

    # Ajusta o tamanho máximo permitido
    client_max_body_size 10M;

    server {

        # Ajusta o tamanho máximo permitido
        client_max_body_size 10M;



        listen 127.0.0.1:80;
        listen 443 ssl;
        ssl_certificate /etc/ssl/certs/nginx-selfsigned2.crt;
        ssl_certificate_key /etc/ssl/private/nginx-selfsigned2.key;

        # vod mode
        vod_mode mapped;

        # vod caches
        vod_metadata_cache metadata_cache 512m;
        vod_response_cache response_cache 128m;
        vod_mapping_cache mapping_cache 5m;

        # gzip manifests
        gzip on;
        gzip_types application/vnd.apple.mpegurl;

        # file handle caching
        open_file_cache          max=1000 inactive=5m;
        open_file_cache_valid    2m;
        open_file_cache_min_uses 1;
        open_file_cache_errors   on;

        location ^~ /video/ {
            alias /home/rui/Desktop/json/;
            vod hls;

            add_header Access-Control-Allow-Headers '*';
            add_header Access-Control-Expose-Headers 'Server,range,Content-Length,Content-Range';
            add_header Access-Control-Allow-Methods 'GET, HEAD, OPTIONS';
            add_header Access-Control-Allow-Origin '*';
            expires 100d;
        }

        # Bloquear acesso a arquivos específicos
        # Essa regra impede o acesso a qualquer arquivo ou diretório cujo nome comece com um ponto (.).
        # Isso geralmente inclui arquivos ou diretórios ocultos do sistema
        location ~ /\. {
            deny all;
        }


	    # reverse proxy configuration
        location /api/ {
    # Pass all incoming trafic to http://localhost:8080/ to http://localhost/api
    proxy_pass http://localhost:8080/;
    
    # Ajuste o tamanho máximo permitido
    client_max_body_size 10M;

    # Tempo máximo de leitura no proxy 
    proxy_read_timeout 100s;

    # Tempo máximo de conexão
    proxy_connect_timeout 100s;

    # Tempo máximo para enviar dados
    proxy_send_timeout 100s;

    # Lua script to validate API key and request body
    access_by_lua_block {
        -- Função para validar a API Key
        local function validate_api_key(api_key)
            -- Lista de chaves válidas
            local valid_keys = {
                "123456789abcdef", 
                "key2-example-abc",
                "key3-example-xyz"
            }

            for _, valid_key in ipairs(valid_keys) do
                if api_key == valid_key then
                    return true
                end
            end

            return false
        end

        -- Extrai a API Key da query string
        local api_key = ngx.var.arg_api_key
        if not api_key or api_key == "" then
            ngx.status = 400
            ngx.say("Bad Request: Missing API Key")
            return ngx.exit(400)
        end

        -- Valida a API Key
        if not validate_api_key(api_key) then
            ngx.status = 403
            ngx.say("Forbidden: Invalid API Key")
            return ngx.exit(403)
        end

        -- Valida o corpo da requisição (já definido)
        ngx.req.read_body()
        local data = ngx.req.get_body_data()

        if not data then
            ngx.status = 400
            ngx.say("Bad Request: No body found")
            return ngx.exit(400)
        end

        -- Valida o formato JSON
        local cjson = require "cjson.safe"
        local decoded = cjson.decode(data)
        if not decoded then
            ngx.status = 400
            ngx.say("Bad Request: Invalid JSON format")
            return ngx.exit(400)
        end

        -- Valida input
        local function contains_invalid_characters(input)
            if not input or type(input) ~= "string" then
                return false
            end

            local invalid_patterns = {
                "[\"'%;%-%-%/%*]", -- Caracteres especiais comuns
                "UNION",
                "SELECT",
                "INSERT",
                "DELETE",
                "UPDATE",
                "DROP",
                "ALTER",
                "<script>",
                "</script>",
                "javascript:",
                "eval%(",
                "alert%(",
                "onerror=",
                "onclick=",
                "[<>]",
                "\\",
                "0x",
                "OR[%s]+1=1",
                "' OR '1'='1",
                "\" OR \"1\"=\"1"
            }

            local input_lower = string.lower(input)
            for _, pattern in ipairs(invalid_patterns) do
                if string.find(input_lower, pattern) then
                    return true
                end
            end
            return false
        end

        -- Validação dos campos 'login' e 'password'
        if contains_invalid_characters(decoded.login) or contains_invalid_characters(decoded.password) then
            ngx.status = 400
            ngx.say("Bad Request: Input contains invalid characters")
            return ngx.exit(400)
        end
    }

    # Permite um "burst" de até 10 requisições extras que são processadas gradualmente.
    # Requisições que ultrapassam o burst são rejeitadas com erro
    limit_req zone=api_limit burst=10;

    # Permitir apenas métodos HTTP seguros
    limit_except GET POST HEAD {
        deny all;
    }

    # Cabeçalhos de segurança
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Content-Security-Policy "default-src 'self'";
}


	location / {
        root /var/www/html;
	}
    }
}


